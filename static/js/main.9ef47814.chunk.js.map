{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","props","robo","className","src","id","alt","title","body","CardList","robos","textSearch","map","includes","key","App","seachRobo","e","setState","target","value","state","fetch","then","r","json","res","console","log","this","type","placeholder","name","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAEaA,G,MAAO,SAAAC,GAClB,OACEA,EAAMC,MACJ,yBAAKC,UAAU,mBACb,yBACEC,IAAG,+BAA0BH,EAAMC,KAAKG,GAArC,0BACHC,IAAI,KAEN,wBAAIH,UAAU,oBAAoBF,EAAMC,KAAKK,OAC7C,uBAAGJ,UAAU,0BAA0BF,EAAMC,KAAKM,SCR7CC,EAAW,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAChC,OACE,yBAAKR,UAAU,aACZO,EACCA,EAAME,KAAI,SAAAV,GACR,GAAIA,EAAKK,MAAMM,SAASF,GACtB,OAAO,kBAAC,EAAD,CAAMG,IAAKZ,EAAKG,GAAIH,KAAMA,OAGrC,mCCgCOa,E,YAvCb,aAAe,IAAD,8BACZ,+CAYFC,UAAY,SAAAC,GACV,EAAKC,SAAS,CACZP,WAAYM,EAAEE,OAAOC,SAbvB,EAAKC,MAAQ,CACXX,MAAO,GACPC,WAAY,IAJF,E,iFAQO,IAAD,OAClBW,MAAM,8CACHC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GAAG,OAAI,EAAKR,SAAS,CAAER,MAAOgB,S,+BAStC,OADAC,QAAQC,IAAIC,KAAKR,OAEf,6BACE,yBAAKlB,UAAU,cACb,2BACEA,UAAU,SACV2B,KAAK,SACLC,YAAY,gBACZC,KAAK,SACL3B,GAAG,SACH4B,SAAUJ,KAAKb,aAInB,kBAAC,EAAD,CAAUL,WAAYkB,KAAKR,MAAMV,WAAYD,MAAOmB,KAAKR,MAAMX,a,GAlCrDwB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.9ef47814.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Card = props => {\r\n  return (\r\n    props.robo && (\r\n      <div className=\"card-list__body\">\r\n        <img\r\n          src={`https://robohash.org/${props.robo.id}?set=set2&size=180x300`}\r\n          alt=\"\"\r\n        />\r\n        <h2 className=\"card-list__title\">{props.robo.title}</h2>\r\n        <p className=\"card-list__description\">{props.robo.body}</p>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = ({ robos, textSearch }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {robos ? (\r\n        robos.map(robo => {\r\n          if (robo.title.includes(textSearch))\r\n            return <Card key={robo.id} robo={robo} />;\r\n        })\r\n      ) : (\r\n        <h1>-</h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\n\nimport React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robos: [],\n      textSearch: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(r => r.json())\n      .then(res => this.setState({ robos: res }));\n  }\n  seachRobo = e => {\n    this.setState({\n      textSearch: e.target.value\n    });\n  };\n  render() {\n    console.log(this.state);\n    return (\n      <div>\n        <div className=\"search-box\">\n          <input\n            className=\"search\"\n            type=\"search\"\n            placeholder=\"search here..\"\n            name=\"search\"\n            id=\"search\"\n            onChange={this.seachRobo}\n          />\n        </div>\n\n        <CardList textSearch={this.state.textSearch} robos={this.state.robos} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}